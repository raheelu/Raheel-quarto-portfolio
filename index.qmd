---
title: "Matplotlib Visualization Demo"
author: "Your Name"
date: today
format: 
  html:
    theme: cosmo
    toc: true
    toc-depth: 2
    code-fold: true
    code-tools: true
    embed-resources: true
execute:
  echo: true
  warning: false
---

# Introduction

This Quarto document demonstrates various matplotlib visualizations. We'll explore different types of plots and how to customize them effectively.

## Setup

First, let's import the necessary libraries:

```{python}
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from matplotlib import style

# Set style for better-looking plots
plt.style.use('seaborn-v0_8')
```

## Basic Line Plot

Let's start with a simple line plot showing a sine wave:

```{python}
#| label: fig-line-plot
#| fig-cap: "A simple sine wave visualization"

x = np.linspace(0, 2*np.pi, 100)
y = np.sin(x)

plt.figure(figsize=(10, 6))
plt.plot(x, y, 'b-', linewidth=2, label='sin(x)')
plt.xlabel('x')
plt.ylabel('sin(x)')
plt.title('Sine Wave')
plt.grid(True, alpha=0.3)
plt.legend()
plt.show()
```

## Multiple Plots

Now let's create multiple plots on the same figure:

```{python}
#| label: fig-multiple-plots
#| fig-cap: "Multiple trigonometric functions"

x = np.linspace(0, 2*np.pi, 100)
y1 = np.sin(x)
y2 = np.cos(x)
y3 = np.tan(x)

plt.figure(figsize=(12, 8))

# Subplot 1: Sine and Cosine
plt.subplot(2, 2, 1)
plt.plot(x, y1, 'b-', label='sin(x)')
plt.plot(x, y2, 'r-', label='cos(x)')
plt.title('Sine and Cosine')
plt.legend()
plt.grid(True, alpha=0.3)

# Subplot 2: Tangent
plt.subplot(2, 2, 2)
plt.plot(x, y3, 'g-', label='tan(x)')
plt.title('Tangent')
plt.ylim(-5, 5)
plt.legend()
plt.grid(True, alpha=0.3)

# Subplot 3: Scatter plot
plt.subplot(2, 2, 3)
random_x = np.random.randn(50)
random_y = np.random.randn(50)
plt.scatter(random_x, random_y, alpha=0.6, c='purple')
plt.title('Random Scatter Plot')
plt.grid(True, alpha=0.3)

# Subplot 4: Bar chart
plt.subplot(2, 2, 4)
categories = ['A', 'B', 'C', 'D', 'E']
values = [23, 45, 56, 78, 32]
plt.bar(categories, values, color=['red', 'green', 'blue', 'orange', 'purple'])
plt.title('Sample Bar Chart')
plt.xlabel('Categories')
plt.ylabel('Values')

plt.tight_layout()
plt.show()
```

## Data Visualization with Pandas

Let's create some sample data and visualize it:

```{python}
#| label: fig-data-visualization
#| fig-cap: "Data visualization with sample dataset"

# Create sample data
np.random.seed(42)
data = pd.DataFrame({
    'Sales': np.random.normal(100, 20, 100),
    'Marketing': np.random.normal(50, 15, 100),
    'Profit': np.random.normal(30, 10, 100),
    'Region': np.random.choice(['North', 'South', 'East', 'West'], 100)
})

fig, axes = plt.subplots(2, 2, figsize=(15, 10))

# Histogram
axes[0, 0].hist(data['Sales'], bins=20, alpha=0.7, color='skyblue', edgecolor='black')
axes[0, 0].set_title('Sales Distribution')
axes[0, 0].set_xlabel('Sales')
axes[0, 0].set_ylabel('Frequency')

# Box plot
data.boxplot(column=['Sales', 'Marketing', 'Profit'], ax=axes[0, 1])
axes[0, 1].set_title('Box Plot Comparison')
axes[0, 1].set_ylabel('Values')

# Scatter plot
axes[1, 0].scatter(data['Sales'], data['Profit'], alpha=0.6, c=data['Marketing'], cmap='viridis')
axes[1, 0].set_xlabel('Sales')
axes[1, 0].set_ylabel('Profit')
axes[1, 0].set_title('Sales vs Profit (colored by Marketing)')

# Bar plot by region
region_sales = data.groupby('Region')['Sales'].mean()
axes[1, 1].bar(region_sales.index, region_sales.values, color=['red', 'green', 'blue', 'orange'])
axes[1, 1].set_title('Average Sales by Region')
axes[1, 1].set_xlabel('Region')
axes[1, 1].set_ylabel('Average Sales')

plt.tight_layout()
plt.show()
```

## Advanced Visualization

Let's create a more sophisticated visualization:

```{python}
#| label: fig-advanced-plot
#| fig-cap: "Advanced matplotlib visualization with multiple elements"

# Create data
x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.cos(x)
y3 = np.exp(-x/3)

fig, ax1 = plt.subplots(figsize=(12, 8))

# First y-axis
color1 = 'tab:blue'
ax1.set_xlabel('Time')
ax1.set_ylabel('Amplitude', color=color1)
line1 = ax1.plot(x, y1, color=color1, linewidth=2, label='sin(x)')
line2 = ax1.plot(x, y2, color='tab:red', linewidth=2, label='cos(x)')
ax1.tick_params(axis='y', labelcolor=color1)
ax1.grid(True, alpha=0.3)

# Second y-axis
ax2 = ax1.twinx()
color2 = 'tab:green'
ax2.set_ylabel('Exponential', color=color2)
line3 = ax2.plot(x, y3, color=color2, linewidth=2, label='exp(-x/3)')
ax2.tick_params(axis='y', labelcolor=color2)

# Add legend
lines = line1 + line2 + line3
labels = [l.get_label() for l in lines]
ax1.legend(lines, labels, loc='upper right')

plt.title('Advanced Plot with Multiple Y-Axes')
plt.show()
```

## Conclusion

This document demonstrates various matplotlib capabilities:

- Basic line plots
- Multiple subplots
- Data visualization with pandas
- Advanced plotting techniques

Matplotlib provides a powerful foundation for creating publication-quality visualizations in Python. With Quarto, you can seamlessly integrate these plots into your documents and reports.

## Summary Statistics

Let's end with a quick summary of our sample data:

```{python}
print("Sample Data Summary:")
print(data.describe())
```
